name: Release

on:
  push:
    tags:
      - v[0-9].[0-9]+.[0-9]+

jobs:
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x86-64, aarch64]
        exclude:
          - os: macos-latest
            arch: x86
          - os: macos-latest
            arch: aarch64
          - os: windows-latest
            arch: aarch64
        include:
          - os: ubuntu-latest
            compiled-path: libcurve25519.so
          - os: macos-latest
            compiled-path: libcurve25519.dylib
          - os: windows-latest
            compiled-path: Debug/curve25519.dll
          - os: ubuntu-latest
            arch: x86
            target-name: libcurve25519.x86.so
          - os: ubuntu-latest
            arch: x86-64
            target-name: libcurve25519.x86-64.so
          - os: ubuntu-latest
            arch: aarch64
            target-name: libcurve25519.arm64.so
          - os: macos-latest
            target-name: libcurve25519.x86-64.dylib
          - os: windows-latest
            arch: x86
            target-name: libcurve25519.x86.dll
          - os: windows-latest
            arch: x86-64
            target-name: libcurve25519.x86-64.dll
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare linux x86
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'x86' }}
        run: |
          echo 'set_target_properties(curve25519-donna PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")' >> jni/CMakeLists.txt
          echo 'set_target_properties(curve25519-ref10 PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")' >> jni/CMakeLists.txt
          echo 'set_target_properties(curve25519 PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")' >> jni/CMakeLists.txt
          sudo apt-get install -y gcc-multilib
      - name: Prepare windows x86
        if: ${{ matrix.os == 'windows-latest' && matrix.arch == 'x86' }}
        run: |
          echo 'set_target_properties(curve25519-donna PROPERTIES CMAKE_GENERATOR_PLATFORM Win32)' >> jni/CMakeLists.txt
          echo 'set_target_properties(curve25519-ref10 PROPERTIES CMAKE_GENERATOR_PLATFORM Win32)' >> jni/CMakeLists.txt
          echo 'set_target_properties(curve25519 PROPERTIES CMAKE_GENERATOR_PLATFORM Win32)' >> jni/CMakeLists.txt
      - name: Prepare linux arm64
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64' }}
        run: |
          echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> jni/CMakeLists.txt
          echo "set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)" >> jni/CMakeLists.txt
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Build native
        run: |
          mkdir jni/build
          cd jni/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .
          cd ..
          mv build/${{ matrix.compiled-path }} ./${{ matrix.target-name }}
      - name: Upload result
        uses: actions/upload-artifact@v2
        with:
          name: native
          path: jni/${{ matrix.target-name }}

  release:
    runs-on: ubuntu-latest
    needs: build-native
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download native libs
        uses: actions/download-artifact@v1
        with:
          name: native
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Prepare to build
        run: |
          echo '${{ secrets.GPG_KEY_CONTENTS }}' | base64 -d > publish_key.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_PASSPHRASE }}" --output secret.gpg publish_key.gpg
          mkdir -p java/src/main/resources/
          cp -r native java/src/main/resources/
      - name: Stage
        run:
          ./gradlew uploadArchives
          -PsonatypeRepo=${{ secrets.SONATYPE_REPO }}
          -PwhisperSonatypeUsername=${{ secrets.SONATYPE_USERNAME }}
          -PwhisperSonatypePassword=${{ secrets.SONATYPE_PASSWORD }}
          -Psigning.secretKeyRingFile=../secret.gpg
          -Psigning.keyId=${{ secrets.SIGNING_KEY_ID }}
          -Psigning.password=${{ secrets.SIGNING_PASSWORD }}
      - name: Release
        run:
          ./gradlew closeAndReleaseRepository
          -PsonatypeRepo=
          -PwhisperSonatypeUsername=${{ secrets.SONATYPE_USERNAME }}
          -PwhisperSonatypePassword=${{ secrets.SONATYPE_PASSWORD }}
          -Psigning.secretKeyRingFile=
          -Psigning.keyId=
          -Psigning.password=
      - uses: actions/upload-artifact@v2
        with:
          name: released
          path: java/build/libs
